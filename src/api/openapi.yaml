openapi: 3.0.0
info:
  title: 'Conversations Inbox API'
  description: |
    The Conversations Inbox API is a JSON REST API to connect to social messaging platforms like WhatsApp Business,
    Apple Business Chat, Facebook Messenger, Twitter DM, Viber, LINE and more.

    **HTTP requests**

    Standard HTTP methods, such as GET or POST, are used with the *application/json* content type.
    API keys are used for authentication and TLS 1.2 is required.

    **HTTP responses**

    HTTP success status codes, such as *200 OK* or *201 Created*, are returned for successful responses and the
    response data has the *application/json* content type.

    HTTP error status codes, such as *400 Bad Request* or *401 Unauthorized*, are returned for error responses.
    See [Error codes](#error-codes) for more information.

    ## Channels & JIDs

    The API uses Jabber IDs (JIDs) to identify channels and contacts. They have the same format as email addresses.
    The following channels are supported:

    | Channel             | JID example |
    |---------------------|----------------------------------------------------|
    | WhatsApp Business   | 31611111111@whatsapp.eazy.im |
    | Apple Business Chat | d2b9f484-08ac-45a7-bbe0-f2f7d844bcb6@apple.eazy.im |
    | Facebook Messenger  | 1918363544518991@messenger.eazy.im |
    | Line                | 8191584934115639@line.eazy.im |
    | Twitter DM          | 872362551@twitter.eazy.im |
    | Viber               | voON2IU2FTGtgUB50qc08g@viber.eazy.im |
    | Web chat            | 8191584934115639@webchat.eazy.im |
    | SMS                 | 31633333333@sms.eazy.im |

    **Note:** Custom channels can be added on your demand. For instance, an existing chat in your custom mobile app
    or live chat on your website can be added as a channel in the Conversations Inbox.

    ## Error codes

    ```json
    400 Bad Request

    {
        "error": {
            "code": 1005,
            "message": "Jid is invalid"
        },
        "traceId": "7e6459"
    }
    ```

    In the case an HTTP error status (4xx) was returned, the response provides a detailed error code and message
    in the JSON body, see the sample on the right.

    The *traceId* can be used by our support team to track down the corresponding request.

    The following error codes and messages are defined:

    | Error code | Description |
    |----------------|-------------------|
    | 1001 | Unauthorized |
    | 1002 | Access denied |
    | 1003 | Service unavailable |
    | 1004 | Internal server error |
    | 1005 | Validation error |
    | 1006 | Template name does not exist |
    | 1007 | User does not have WhatsApp |
    | 1008 | Media is invalid |
    | 1009 | Not found |
    | 1010 | Assistant has no ownership of conversation |
    | 1011 | Message rejected |
    | 1012 | Bad gateway |
    | 1013 | Parameter count mismatch |
    | 1014 | Already exists |
    | 1015 | Customer care window expired |
  contact:
    name: tyntec API Support
    url: http://www.tyntec.com/support
    email: support@tyntec.com
  version: '1.0'
  x-repository: https://github.com/tyntec/api-collection/blob/master/third-party/eazy
  x-major-version: v1
servers:
  - url: https://api.cmd.tyntec.com/
security:
  - bearerAuth: []
paths:
  /v3/channels/{channelJid}/messages/{contactJid}:
    post:
      summary: Send a message
      tags:
        - 'Messaging'
      operationId: sendMessage
      description: |
        Request to send a message to a contact in a channel.

        The JSON body structure of each message type is listed below.

        **Audio**

        | **Element** | **Value**	| **Mandatory**	| **Description**  |
        | ---         | ---       | ---           | ---              |
        | mimeType    | string    | Y             |MIME type         |
        |type	        | "audio"	| Y             | Message type     |

        **Contact**

        | **Element** | **Value**	| **Mandatory**	| **Description**   |
        | ---         | ---       | ---           | ---               |
        | contacts	| array 	| Y             | Contact structure |
        | type    	| "contact" | Y          	| Message type      |

        **Document**

        | **Element** | **Value**	| **Mandatory**	| **Description**  |
        | ---         | ---       | ---           | ---              |
        | fileName	| string	| Y	            | File name        |
        | mimeType	| string	| Y	            | MIME type        |
        | title   	| string	| Y           	| Document title   |
        | type        | "document"| Y         	| Message type     |

        **Gif**

        | **Element** | **Value**	| **Mandatory**	| **Description**      |
        | ---         | ---       | ---           | ---                  |
        | caption	    | string	| N             | Caption text message |
        | mimeType	| string	| Y         	| MIME type            |
        | type    	| "gif" 	| Y           	| Message type         |

        **Image**

        | **Element** | **Value**	| **Mandatory**	| **Description**      |
        | ---         | ---       | ---           | ---                  |
        | caption   	| string 	| N             | Caption text message |
        | mimeType	| string	| Y             | MIME type            |
        | type        | "image" 	| Y         	| Message type         |

        **Location**

        | **Element** | **Value**	 | **Mandatory**	| **Description**         |
        | ---         | ---        | ---              | ---                     |
        | latitude	| float	Y	 | Latitude         | coordinate              |
        | longitude	| float	Y	 | Longitude        | coordinate              |
        | name	    | string	 | N                | Name of the location    |
        | type	    | "location" | Y                | Message type            |
        | url	        | string	 | N                | Website URL             |

        **Voice message**

        | **Element** | **Value** | **Mandatory** | **Description**   |
        | ---         | ---       | ---           | ---               |
        | mimeType    | string    | Y             | MIME type         |
        | type        | "ptt"     | Y             | Message type      |

        **Sticker**

        | **Element** | **Value**	| **Mandatory**	| **Description**   |
        | ---         | ---       | ---           | ---               |
        | mimeType	| string	| Y             | MIME type         |
        | type        | "sticker"	| Y             | Message type      |

        **Template**

        | **Element** | **Value**	 | **Mandatory**	| **Description**     |
        | ---         | ---        | ---              | ---                 |
        | template	| array      | Y                | Template structure  |
        | type        | "template" | Y                | Message type        |

        **Text**

        | **Element** | **Value**	| **Mandatory**	| **Description**   |
        | ---         | ---       | ---           | ---               |
        | body        | string	| Y             | Message body      |
        | type        | "text"	| Y             | Message type      |

        **Video**

        | **Element** | **Value**	| **Mandatory**	| **Description**       |
        | ---         | ---       | ---           | ---                   |
        | caption     | string	| N             | Caption text message  |
        | mimeType	| string	| Y             | MIME type             |
        | type        | "video"	| Y             | Message type          |
      parameters:
        - in: path
          name: channelJid
          required: true
          description: Jabber IDs to represent channel
          schema:
            type: string
            format: email
            example: 'channelJid@company.com'
        - in: path
          name: contactJid
          required: true
          description: Jabber IDs to represent contacts
          schema:
            type: string
            format: email
            example: 'contactJid@company.com'
      requestBody:
        description: The message you would like to send
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequestBody'

      responses:
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendMessageResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: The API key is transmitted using the Authentication header with the Bearer scheme.
      name: Authorization
      description: |
        The Conversations Inbox API uses API keys for authentication. The API key is transmitted using the Authorization
        header with the Bearer scheme:

        `Authorization: Bearer Tnhip5Hiq10gGiKhNS850ShCAjIQZAgKDAN0JAIL`

        ## Scopes

        Each key has a scope that defines to which endpoints the key has access to. The following scopes are defined:

        | **Scope**   | **Description** |
        |-------------|---------------|
        | Channel     | Access to channel related endpoints |
        | Assistant   | Same as channel including assistant related endpoints |
        | Company     | Same as channel including company related endpoints |
        | Owner       | Same as company including owner related endpoints |

        **Note:** API keys are stored in a hashed format. so it is not possible to retrieve them.

  schemas:
    SendMessageRequestBody:
      type: object
      required:
        - message
      properties:
        message:
          oneOf:
            - $ref: '#/components/schemas/SendTextMessageBodyType'
            - $ref: '#/components/schemas/SendVideoMessageBodyType'
            - $ref: '#/components/schemas/SendTemplateMessageBodyType'
            - $ref: '#/components/schemas/SendStickerMessageBodyType'
            - $ref: '#/components/schemas/SendVoiceMessageBodyType'
            - $ref: '#/components/schemas/SendLocationMessageBodyType'
            - $ref: '#/components/schemas/SendImageMessageBodyType'
            - $ref: '#/components/schemas/SendGifMessageBodyType'
            - $ref: '#/components/schemas/SendDocumentMessageBodyType'
            - $ref: '#/components/schemas/SendContactMessageBodyType'
            - $ref: '#/components/schemas/SendAudioMessageBodyType'

    SendTextMessageBodyType:
      type: object
      required:
        - type
        - body
      properties:
        type:
          type: string
          enum: ['text']
          defaultValue: 'text'
        body:
          type: string

    SendVideoMessageBodyType:
      type: object
      required:
        - mimeType
        - type
      properties:
        caption:
          type: string
        mimeType:
          type: string
        type:
          type: string
          enum: ['video']
          defaultValue: 'video'

    SendTemplateMessageBodyType:
      type: object
      required:
        - type
        - template
      properties:
        type:
          type: string
          enum: ['template']
        template:
          type: array
          items:
            type: object

    SendStickerMessageBodyType:
      type: object
      required:
        - mimeType
        - type
      properties:
        type:
          type: string
          enum: ['sticker']
        mimeType:
          type: string

    SendVoiceMessageBodyType:
      type: object
      required:
        - mimeType
        - type
      properties:
        type:
          type: string
          enum: ['ptt']
        mimeType:
          type: string

    SendLocationMessageBodyType:
      type: object
      required:
        - type
        - latitude
        - longitude
      properties:
        type:
          type: string
          enum: ['location']
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        name:
          type: string
        url:
          type: string

    SendImageMessageBodyType:
      type: object
      required:
        - mimeType
        - type
      properties:
        caption:
          type: string
        mimeType:
          type: string
        type:
          type: string
          enum: ['image']

    SendGifMessageBodyType:
      type: object
      required:
        - mimeType
        - type
      properties:
        caption:
          type: string
        mimeType:
          type: string
        type:
          type: string
          enum: ['gif']

    SendDocumentMessageBodyType:
      type: object
      required:
        - mimeType
        - type
        - title
        - fileName
      properties:
        title:
          type: string
        fileName:
          type: string
        mimeType:
          type: string
        type:
          type: string
          enum: ['document']

    SendAudioMessageBodyType:
      type: object
      required:
        - mimeType
        - type
      properties:
        mimeType:
          type: string
        type:
          type: string
          enum: ['audio']

    SendContactMessageBodyType:
      type: object
      required:
        - type
        - contacts
      properties:
        type:
          type: string
          enum: ['contact']
        contacts:
          type: array
          items:
            type: object

    SendMessageResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string

    # Webhooks

    InboundMessage:
      oneOf:
        - $ref: '#/components/schemas/BasicInboundMessage'
        - $ref: '#/components/schemas/WhatsAppInboundMediaMessage'
        - $ref: '#/components/schemas/WhatsAppInboundMessage'
        - $ref: '#/components/schemas/TwitterInboundMediaMessage'
        - $ref: '#/components/schemas/TwitterInboundMessage'
        - $ref: '#/components/schemas/MessengerInboundMediaMessage'
        - $ref: '#/components/schemas/MessengerInboundMessage'
        - $ref: '#/components/schemas/ViberInboundMediaMessage'
        - $ref: '#/components/schemas/ViberInboundMessage'
        - $ref: '#/components/schemas/LiveChatInboundMediaMessage'
        - $ref: '#/components/schemas/LiveChatInboundMessage'
        - $ref: '#/components/schemas/SMSInboundMessage'

    BasicInboundMessage:
      type: object
      required:
        - from
        - message
        - timestamp
        - to
        - type
        - version
      properties:
        from:
          $ref: '#/components/schemas/From'
        message:
          $ref: '#/components/schemas/TextMessage'
        timestamp:
          type: integer
        to:
          type: string
        type:
          type: string
          enum:
            - message
        version:
          type: integer
          min: 2
          max: 2
    BasicInboundMediaMessage:
      type: object
      required:
        - media
      allOf:
        - $ref: '#/components/schemas/BasicInboundMessage'
      properties:
        media:
          $ref: '#/components/schemas/Media'
        message:
          type: object
          description: refined per channel
    From:
      type: object
      properties:
        jid:
          type: string
        name:
          type: string
    Media:
      type: object
      properties:
        size:
          type: integer
        url:
          type: string
    AudioMessage:
      type: object
      properties:
        id:
          type: string
        mimeType:
          type: string
        type:
          type: string
          enum:
            - audio
    ContactMessage:
      type: object
      properties:
        contacts:
          type: object
        id:
          type: string
        type:
          type: string
          enum:
            - contact
    DocumentMessage:
      type: object
      properties:
        fileName:
          type: string
        id:
          type: string
        mimeType:
          type: string
        title:
          type: string
        type:
          type: string
          enum:
            - document
    GifMessage:
      type: object
      properties:
        caption:
          type: string
        id:
          type: string
        mimeType:
          type: string
        type:
          type: string
          enum:
            - gif
    ImageMessage:
      type: object
      properties:
        caption:
          type: string
        id:
          type: string
        mimeType:
          type: string
        type:
          type: string
          enum:
            - image
    LocationMessage:
      type: object
      properties:
        id:
          type: string
        latitude:
          type: integer
        longitude:
          type: integer
        name:
          type: string
        type:
          type: string
          enum:
            - location
        url:
          type: string
    StickerMessage:
      type: object
      properties:
        id:
          type: string
        mimeType:
          type: string
        type:
          type: string
          enum:
            - sticker
    TextMessage:
      type: object
      properties:
        body:
          type: string
        id:
          type: string
        type:
          type: string
          enum:
            - text
    VideoMessage:
      type: object
      properties:
        id:
          type: string
        mimeType:
          type: string
        type:
          type: string
          enum:
            - video
    VoiceMessage:
      type: object
      properties:
        id:
          type: string
        mimeType:
          type: string
        type:
          type: string
          enum:
            - ptt
    # WhatsApp
    WhatsAppInboundMessage:
      type: object
      allOf:
        - $ref: '#/components/schemas/BasicInboundMessage'
      properties:
        contextInfo:
          $ref: '#/components/schemas/WhatsAppContextInfo'
        message:
          oneOf:
            - $ref: '#/components/schemas/TextMessage'
            - $ref: '#/components/schemas/ContactMessage'
            - $ref: '#/components/schemas/LocationMessage'
      example:
        from:
          jid: 123123@whatsapp.eazy.im
          name: John
        message:
          body: Hi!
          id: 455ca0457cc2b647d6c33954ab0ec27fbfd38661
          type: text
        timestamp: 12313141
        to: 432324@whatsapp.eazy.im
        type: message
        version: 2
    WhatsAppInboundMediaMessage:
      type: object
      allOf:
        - $ref: '#/components/schemas/BasicInboundMediaMessage'
      properties:
        contextInfo:
          $ref: '#/components/schemas/WhatsAppContextInfo'
        message:
          oneOf:
            - $ref: '#/components/schemas/AudioMessage'
            - $ref: '#/components/schemas/DocumentMessage'
            - $ref: '#/components/schemas/ImageMessage'
            - $ref: '#/components/schemas/VoiceMessage'
            - $ref: '#/components/schemas/StickerMessage'
            - $ref: '#/components/schemas/VideoMessage'
      example:
        from:
          jid: 123123@whatsapp.eazy.im
          name: John
        contextInfo:
          quotedMessage:
            id: 89729834zuiujhvkijdfngidgh897432hr5234
            jid: 123131414@whatsapp.eazy.im
        media:
          size: 12341,
          url: https://cmd.tyntec.com/media/70c881d4a26984ddce795f6f71817c9cf4480e79
        message:
          caption: nice image
          id: 455ca0457cc2b647d6c33954ab0ec27fbfd38661
          mimeType: image/jpeg
          type: image
        timestamp: 12313141
        to: 432324@whatsapp.eazy.im
        type: message
        version: 2
    WhatsAppContextInfo:
      type: object
      properties:
        quotedMessage:
          $ref: '#/components/schemas/WhatsAppQuotedMessage'
    WhatsAppQuotedMessage:
      type: object
      properties:
        id:
          type: string
        jid:
          type: string
    WhatsAppMessageDeleted:
      type: object
      required:
        - from
        - message
        - timestamp
        - to
        - type
        - version
      properties:
        from:
          $ref: '#/components/schemas/From'
        message:
          type: object
          properties:
            id:
              type: string
        timestamp:
          type: integer
        to:
          type: string
        type:
          type: string
          enum:
            - revoke
        version:
          type: integer
          min: 2
          max: 2
    # Messenger
    MessengerInboundMessage:
      type: object
      allOf:
        - $ref: '#/components/schemas/BasicInboundMessage'
      properties:
        message:
          oneOf:
            - $ref: '#/components/schemas/TextMessage'
      example:
        from:
          jid: 123123@messenger.eazy.im
          name: John
        message:
          body: Hi!
          id: 455ca0457cc2b647d6c33954ab0ec27fbfd38661
          type: text
        timestamp: 12313141
        to: 432324@messenger.eazy.im
        type: message
        version: 2
    MessengerInboundMediaMessage:
      type: object
      allOf:
        - $ref: '#/components/schemas/BasicInboundMediaMessage'
      properties:
        message:
          oneOf:
            - $ref: '#/components/schemas/AudioMessage'
            - $ref: '#/components/schemas/DocumentMessage'
            - $ref: '#/components/schemas/GifMessage'
            - $ref: '#/components/schemas/ImageMessage'
            - $ref: '#/components/schemas/VoiceMessage'
            - $ref: '#/components/schemas/VideoMessage'
      example:
        from:
          jid: 123123@messenger.eazy.im
          name: John
        media:
          size: 12341,
          url: https://cmd.tyntec.com/media/70c881d4a26984ddce795f6f71817c9cf4480e79
        message:
          caption: nice image
          id: 455ca0457cc2b647d6c33954ab0ec27fbfd38661
          mimeType: image/jpeg
          type: image
        timestamp: 12313141
        to: 432324@messenger.eazy.im
        type: message
        version: 2
    # Twitter
    TwitterInboundMessage:
      type: object
      allOf:
        - $ref: '#/components/schemas/BasicInboundMessage'
      properties:
        message:
          oneOf:
            - $ref: '#/components/schemas/TextMessage'
      example:
        from:
          jid: 123123@twitter.eazy.im
          name: John
        message:
          body: Hi!
          id: 455ca0457cc2b647d6c33954ab0ec27fbfd38661
          type: text
        timestamp: 12313141
        to: 432324@twitter.eazy.im
        type: message
        version: 2
    TwitterInboundMediaMessage:
      type: object
      allOf:
        - $ref: '#/components/schemas/BasicInboundMediaMessage'
      properties:
        message:
          oneOf:
            - $ref: '#/components/schemas/GifMessage'
            - $ref: '#/components/schemas/ImageMessage'
            - $ref: '#/components/schemas/VideoMessage'
      example:
        from:
          jid: 123123@twitter.eazy.im
          name: John
        media:
          size: 12341,
          url: https://cmd.tyntec.com/media/70c881d4a26984ddce795f6f71817c9cf4480e79
        message:
          caption: nice image
          id: 455ca0457cc2b647d6c33954ab0ec27fbfd38661
          mimeType: image/jpeg
          type: image
        timestamp: 12313141
        to: 432324@twitter.eazy.im
        type: message
        version: 2
    # Viber
    ViberInboundMessage:
      type: object
      allOf:
        - $ref: '#/components/schemas/BasicInboundMessage'
      properties:
        message:
          oneOf:
            - $ref: '#/components/schemas/TextMessage'
            - $ref: '#/components/schemas/LocationMessage'
      example:
        from:
          jid: 123123@viber.eazy.im
          name: John
        message:
          body: Hi!
          id: 455ca0457cc2b647d6c33954ab0ec27fbfd38661
          type: text
        timestamp: 12313141
        to: 432324@viber.eazy.im
        type: message
        version: 2
    ViberInboundMediaMessage:
      type: object
      allOf:
        - $ref: '#/components/schemas/BasicInboundMediaMessage'
      properties:
        message:
          oneOf:
            - $ref: '#/components/schemas/DocumentMessage'
            - $ref: '#/components/schemas/ImageMessage'
            - $ref: '#/components/schemas/VideoMessage'
      example:
        from:
          jid: 123123@viber.eazy.im
          name: John
        media:
          size: 12341,
          url: https://cmd.tyntec.com/media/70c881d4a26984ddce795f6f71817c9cf4480e79
        message:
          caption: nice image
          id: 455ca0457cc2b647d6c33954ab0ec27fbfd38661
          mimeType: image/jpeg
          type: image
        timestamp: 12313141
        to: 432324@viber.eazy.im
        type: message
        version: 2
    # LiveChat
    LiveChatInboundMessage:
      type: object
      allOf:
        - $ref: '#/components/schemas/BasicInboundMessage'
      properties:
        message:
          oneOf:
            - $ref: '#/components/schemas/TextMessage'
      example:
        from:
          jid: 123123@livechat.eazy.im
          name: John
        message:
          body: Hi!
          id: 455ca0457cc2b647d6c33954ab0ec27fbfd38661
          type: text
        timestamp: 12313141
        to: 432324@sms.livechat.im
        type: message
        version: 2
    LiveChatInboundMediaMessage:
      type: object
      allOf:
        - $ref: '#/components/schemas/BasicInboundMediaMessage'
      properties:
        message:
          oneOf:
            - $ref: '#/components/schemas/DocumentMessage'
            - $ref: '#/components/schemas/ImageMessage'
      example:
        from:
          jid: 123123@livechat.eazy.im
          name: John
        media:
          size: 12341,
          url: https://cmd.tyntec.com/media/70c881d4a26984ddce795f6f71817c9cf4480e79
        message:
          caption: nice image
          id: 455ca0457cc2b647d6c33954ab0ec27fbfd38661
          mimeType: image/jpeg
          type: image
        timestamp: 12313141
        to: 432324@sms.livechat.im
        type: message
        version: 2
    # SMS
    SMSInboundMessage:
      type: object
      allOf:
        - $ref: '#/components/schemas/BasicInboundMessage'
      properties:
        message:
          oneOf:
            - $ref: '#/components/schemas/TextMessage'
      example:
        from:
          jid: 123123@sms.eazy.im
          name: John
        message:
          body: Hi!
          id: 455ca0457cc2b647d6c33954ab0ec27fbfd38661
          type: text
        timestamp: 12313141
        to: 432324@sms.eazy.im
        type: message
        version: 2
